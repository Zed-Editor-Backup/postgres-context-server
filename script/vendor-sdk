#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

function runCommand(command, cwd) {
  console.log(`Running: ${command}`);
  execSync(command, { stdio: 'inherit', cwd });
}

function copyDir(src, dest) {
  fs.mkdirSync(dest, { recursive: true });
  const entries = fs.readdirSync(src, { withFileTypes: true });

  for (let entry of entries) {
    const srcPath = path.join(src, entry.name);
    const destPath = path.join(dest, entry.name);

    if (entry.isDirectory()) {
      copyDir(srcPath, destPath);
    } else if (path.extname(entry.name) === '.js' && !entry.name.endsWith('.test.js')) {
      fs.copyFileSync(srcPath, destPath);
    }
  }
}

function main() {
  if (process.argv.length !== 3) {
    console.error('Usage: ./vendor-sdk <path-to-sdk-repo>');
    process.exit(1);
  }

  const sdkRepoPath = path.resolve(process.argv[2]);
  const vendorDestPath = path.resolve('vendor/modelcontextprotocol-typescript-sdk/dist');

  // Run npm run build in the SDK repo
  runCommand('npm run build', sdkRepoPath);

  // Clear out the vendor destination directory
  if (fs.existsSync(vendorDestPath)) {
    fs.rmSync(vendorDestPath, { recursive: true, force: true });
  }
  fs.mkdirSync(vendorDestPath, { recursive: true });

  // Copy the dist directory to the vendor location
  const sdkDistPath = path.join(sdkRepoPath, 'dist');
  copyDir(sdkDistPath, vendorDestPath);

  console.log('SDK vendoring completed successfully.');
}

main();
